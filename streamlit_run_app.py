# -*- coding: utf-8 -*-
"""streamlit run app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-c-p_yHSAwCXg3Vepnyaj52sen7TeSq
"""

!python -m spacy download en_core_web_sm



import streamlit as st
import PyPDF2
import spacy

st.title("📄 Resume Ranker using AI")

resume_file = st.file_uploader("Upload your Resume (PDF)", type=["pdf"])
jd_file = st.file_uploader("Upload Job Description (PDF)", type=["pdf"])

nlp = spacy.load("en_core_web_sm")

def extract_text(file):
    reader = PyPDF2.PdfReader(file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

if resume_file and jd_file:
    resume_text = extract_text(resume_file)
    jd_text = extract_text(jd_file)
else:
    # Placeholder text for testing when not running in Streamlit
    resume_text = "This is a sample resume with some skills like Python and machine learning."
    jd_text = "This is a job description requiring skills in Python and data science."

def preprocess(text):
    doc = nlp(text.lower())
    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]
    return tokens

resume_tokens = preprocess(resume_text)
jd_tokens = preprocess(jd_text)

print("Resume tokens:", resume_tokens)
print("JD tokens:", jd_tokens)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def calculate_similarity(text1, text2):
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform([text1, text2])
    score = cosine_similarity(vectors[0:1], vectors[1:2])
    return round(float(score[0][0]) * 100, 2)

score = calculate_similarity(" ".join(resume_tokens), " ".join(jd_tokens))
st.subheader(f"🔍 Resume Match Score: {score}%")

def find_missing_keywords(resume_tokens, jd_tokens):
    resume_set = set(resume_tokens)
    jd_set = set(jd_tokens)
    missing = jd_set - resume_set
    return list(missing)[:10]  # Top 10 missing

missing_keywords = find_missing_keywords(resume_tokens, jd_tokens)
st.markdown("### 🧠 Missing Keywords in Resume:")
st.write(", ".join(missing_keywords))

if score >= 75:
    st.success("Great match! You're ready to apply! ✅")
elif score >= 50:
    st.warning("Decent match — improve your resume with the tips below.")
else:
    st.error("Low match. Consider tailoring your resume further.")