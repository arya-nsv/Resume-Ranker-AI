# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19LpJ2shywc6DXmMOOLAb1Y2au48dehwZ
"""



import streamlit as st
import PyPDF2
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

st.set_page_config(page_title="Resume Ranker using AI", layout="wide")
st.title("📄 Resume Ranker using AI")
st.markdown("Upload your **Resume** and **Job Description**, and get a match score with suggestions!")

# --- PDF Text Extractor ---
def extract_text_from_pdf(uploaded_file):
    pdf_reader = PyPDF2.PdfReader(uploaded_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

# --- Text Preprocessing ---
def preprocess(text):
    doc = nlp(text.lower())
    tokens = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]
    return tokens

# --- Calculate Similarity Score ---
def calculate_similarity(resume_text, jd_text):
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform([resume_text, jd_text])
    score = cosine_similarity(vectors[0:1], vectors[1:2])
    return round(float(score[0][0]) * 100, 2)

# --- Find Missing Keywords ---
def find_missing_keywords(resume_tokens, jd_tokens):
    resume_set = set(resume_tokens)
    jd_set = set(jd_tokens)
    missing = jd_set - resume_set
    return list(missing)[:10]  # Show top 10 missing words

# --- UI Upload ---
resume_file = st.file_uploader("📤 Upload Resume (PDF)", type=["pdf"])
jd_file = st.file_uploader("📤 Upload Job Description (PDF)", type=["pdf"])

if resume_file and jd_file:
    with st.spinner("Processing files..."):
        resume_raw = extract_text_from_pdf(resume_file)
        jd_raw = extract_text_from_pdf(jd_file)

        resume_tokens = preprocess(resume_raw)
        jd_tokens = preprocess(jd_raw)

        similarity_score = calculate_similarity(" ".join(resume_tokens), " ".join(jd_tokens))
        missing_keywords = find_missing_keywords(resume_tokens, jd_tokens)

    st.success(f"✅ Resume Match Score: **{similarity_score}%**")

    if similarity_score >= 75:
        st.balloons()
        st.markdown("🎯 **Great match! You’re ready to apply!**")
    elif similarity_score >= 50:
        st.warning("⚠️ Decent match — improve your resume using the tips below.")
    else:
        st.error("❌ Low match — consider editing your resume to include more relevant skills.")

    st.markdown("### 🔍 Missing Keywords from Resume:")
    st.markdown(", ".join(missing_keywords) if missing_keywords else "✅ Your resume covers all major keywords!")

else:
    st.info("👆 Please upload both resume and job description to begin.")